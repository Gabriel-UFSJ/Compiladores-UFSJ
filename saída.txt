<INT> : int 
<ID> : main
<ABRE_PARENTESES> : (
<FECHA_PARENTESES> : )
<ABRE_CHAVE> : {
<INT> : int 
<ID> : t1
<ATRIBUIÇÃO> : =
<INT_LITERAL> : 0
<PONTO_VIRGULA> : ;
<INT> : int 
<ID> : t2
<ATRIBUIÇÃO> : =
<INT_LITERAL> : 1
<PONTO_VIRGULA> : ;
<INT> : int 
<ID> : nextTerm
<ATRIBUIÇÃO> : =
<INT_LITERAL> : 0
<PONTO_VIRGULA> : ;
<INT> : int 
<ID> : n
<PONTO_VIRGULA> : ;
<PRINTF> : printf
<ABRE_PARENTESES> : (
<STRING_LITERAL> : "Enter a positive number: "
<FECHA_PARENTESES> : )
<PONTO_VIRGULA> : ;
<SCANF> : scanf
<ABRE_PARENTESES> : (
<STRING_LITERAL> : "%d"
<VIRGULA> : ,
<PONTEIRO> : &
<ID> : n
<FECHA_PARENTESES> : )
<PONTO_VIRGULA> : ;
<COMENT_LINHA> : // displays the first two terms which is always 0 and 1
<PRINTF> : printf
<ABRE_PARENTESES> : (
<STRING_LITERAL> : "Fibonacci Series: %d, %d, "
<VIRGULA> : ,
<ID> : t1
<VIRGULA> : ,
<ID> : t2
<FECHA_PARENTESES> : )
<PONTO_VIRGULA> : ;
<ID> : nextTerm
<ATRIBUIÇÃO> : =
<ID> : t1
<MAIS> : +
<ID> : t2
<PONTO_VIRGULA> : ;
<WHILE> : while
<ABRE_PARENTESES> : (
<ID> : nextTerm
<MENOR> : <
<ATRIBUIÇÃO> : =
<ID> : n
<FECHA_PARENTESES> : )
<ABRE_CHAVE> : {
<PRINTF> : printf
<ABRE_PARENTESES> : (
<STRING_LITERAL> : "%d, "
<VIRGULA> : ,
<ID> : nextTerm
<FECHA_PARENTESES> : )
<PONTO_VIRGULA> : ;
<ID> : t1
<ATRIBUIÇÃO> : =
<ID> : t2
<PONTO_VIRGULA> : ;
<ID> : t2
<ATRIBUIÇÃO> : =
<ID> : nextTerm
<PONTO_VIRGULA> : ;
<ID> : nextTerm
<ATRIBUIÇÃO> : =
<ID> : t1
<MAIS> : +
<ID> : t2
<PONTO_VIRGULA> : ;
<FECHA_CHAVE> : }
<RETURN> : return
<INT_LITERAL> : 0
<PONTO_VIRGULA> : ;
<FECHA_CHAVE> : }
